<local:BaseView x:Class="Te.StahpIt.Views.Settings"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                xmlns:local="clr-namespace:Te.StahpIt.Views"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                d:DesignHeight="511"
                d:DesignWidth="800"
                mc:Ignorable="d">

    <Grid>

        <Controls:MetroAnimatedSingleRowTabControl x:Name="m_animatedTabControlSettings" x:FieldModifier="private">

            <!--  General/misc application settings.  -->
            <TabItem x:Name="m_generalSettingsTab"
                     Header="General Settings"
                     x:FieldModifier="private">
                <Grid>

                    <Separator Width="760"
                               Height="14"
                               Margin="20,374,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top" />

                    <!--  Enables or disables automatic running of the application at user logon.  -->
                    <Controls:ToggleSwitch x:Name="m_toggleRunAtStartup"
                                           Margin="24,389,645,15"
                                           Cursor="Hand"
                                           Header="Run At Startup"
                                           IsChecked="{Binding Path=RunAtStartup,
                                                               Mode=TwoWay,
                                                               UpdateSourceTrigger=PropertyChanged}"
                                           OffLabel="No"
                                           OnLabel="Yes"
                                           x:FieldModifier="private" />

                    <!--  Enables or disables internal usage of the user's estimate input.  -->
                    <Controls:ToggleSwitch x:Name="m_toggleEstimateBlocked"
                                           Margin="635,163,20,241"
                                           Cursor="Hand"
                                           Header="Estimate Block Size"
                                           IsChecked="{Binding Path=EstimateBlockedChunkedPayloadSize,
                                                               Mode=TwoWay,
                                                               UpdateSourceTrigger=PropertyChanged}"
                                           OffLabel="No"
                                           OnLabel="Yes"
                                           x:FieldModifier="private" />

                    <!--  Info about what the estimation is used for, and how its used.  -->
                    <TextBlock Width="446"
                               Height="234"
                               Margin="20,23,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               TextWrapping="Wrap"><Run Text="When a request is blocked, the headers for the response are read before the transaction is terminated. The purpose of this is to attempt to read the Content-Length header, to determine the size of the response. This helps with estimating things like how much bandwidth is saved by filtering with certain rules." />
                        <LineBreak /><Run />
                        <LineBreak /><Run Text="When " /><Run Text="requests that receive a " /><Run Text="chunked transfer as a response" /><Run Text=" are blocked, the returned size of the blocked " /><Run Text="transaction" /><Run Text=" reported" /><Run Text=" " /><Run Text="is always zero. This is because it's not possible to accurately predict the total size of a payload from a chunked HTTP transfer" /><Run Text="." />
                        <LineBreak /><Run />
                        <LineBreak /><Run Text="For statistical purposes, it may be desirable to estimate the size of these blocked requests. This is optional, and even the size to estimate is configurable. By default, this functionality is disabled." />
                    </TextBlock>

                    <!--  User input for estimating the size of blocked requests that do not have a fixed, declared length.  -->
                    <TextBox x:Name="m_textboxBlockSizeInBytes"
                             Width="229"
                             Height="23"
                             Margin="551,95,0,0"
                             HorizontalAlignment="Left"
                             VerticalAlignment="Top"
                             DataObject.Pasting="OnDigitOnlyTextPasting"
                             IsEnabled="{Binding ElementName=m_toggleEstimateBlocked,
                                                 Path=IsChecked}"
                             PreviewTextInput="OnDigitOnlyTextPreview"
                             Text="{Binding Path=ChunkedPayloadEstimateString,
                                            Mode=TwoWay,
                                            UpdateSourceTrigger=PropertyChanged}"
                             TextWrapping="NoWrap" />

                    <!--  Instructions for the user's blocked data size estimation.  -->
                    <TextBlock Width="229"
                               Height="53"
                               Margin="551,23,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               TextWrapping="Wrap"><Run Text="Enter a value, in bytes, that should be used as the estimate for blocked requests that had a chunked payload as a response" /><Run Text="." />
                    </TextBlock>

                    <!--  Displays a friendly representation, using the highest round value and sumbol, of the user's estimation input.  -->
                    <TextBlock Width="145"
                               Height="32"
                               Margin="635,126,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Text="{Binding Path=EstimateFriendlyString}"
                               TextAlignment="Right"
                               TextWrapping="NoWrap" />
                </Grid>
            </TabItem>

            <!--  Filtering category creation and management tab.  -->
            <TabItem x:Name="m_rulesAndCategoriesTab"
                     Header="Rules &amp; Categories"
                     x:FieldModifier="private">

                <Grid>

                    <!--  Displays user created categories and enables toggling of each entry.  -->
                    <DataGrid x:Name="m_userFilteringCategories"
                              Width="760"
                              Margin="20,22,20,93"
                              HorizontalAlignment="Center"
                              AutoGenerateColumns="False"
                              ItemsSource="{Binding Path=FilterCategories,
                                                    Mode=Default}"
                              x:FieldModifier="private">

                        <DataGrid.ColumnHeaderStyle>
                            <Style BasedOn="{StaticResource MetroDataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="Padding" Value="0" />
                            </Style>
                        </DataGrid.ColumnHeaderStyle>

                        <DataGrid.Columns>
                            <DataGridCheckBoxColumn Width="64"
                                                    Binding="{Binding Path=Enabled,
                                                                      Mode=TwoWay,
                                                                      UpdateSourceTrigger=PropertyChanged}"
                                                    CanUserResize="False"
                                                    EditingElementStyle="{StaticResource MetroDataGridCheckBox}"
                                                    ElementStyle="{StaticResource MetroDataGridCheckBox}"
                                                    Header="Enabled"
                                                    TextBlock.TextAlignment="Left" />

                            <DataGridTextColumn Width="128"
                                                Binding="{Binding Path=TotalRulesLoaded,
                                                                  Mode=OneWay}"
                                                CanUserReorder="False"
                                                CanUserResize="False"
                                                Header="Rules Loaded"
                                                TextBlock.TextAlignment="Left" />

                            <DataGridTextColumn Width="128"
                                                Binding="{Binding Path=TotalRulesFailed,
                                                                  Mode=OneWay}"
                                                CanUserReorder="False"
                                                CanUserResize="False"
                                                Header="Rules Failed"
                                                TextBlock.TextAlignment="Left" />

                            <DataGridTextColumn Width="140"
                                                Binding="{Binding Path=CategoryName,
                                                                  Mode=OneWay}"
                                                CanUserReorder="False"
                                                CanUserResize="False"
                                                Header="Category Name"
                                                IsReadOnly="True"
                                                TextBlock.TextAlignment="Left" />

                            <DataGridTextColumn Width="298"
                                                Binding="{Binding Path=RuleListURL,
                                                                  Mode=OneWay}"
                                                CanUserReorder="False"
                                                CanUserResize="False"
                                                Header="Source"
                                                IsReadOnly="True"
                                                TextBlock.TextAlignment="Left" />
                        </DataGrid.Columns>

                    </DataGrid>

                    <Separator Width="760"
                               Height="14"
                               Margin="20,390,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top" />

                    <!--  Shows a flyout where the user can add a new filtering category.  -->
                    <Button x:Name="m_btnShowAddCategory"
                            Width="46"
                            Height="46"
                            Margin="674,409,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Cursor="Hand"
                            Style="{StaticResource MetroCircleButtonStyle}"
                            x:FieldModifier="private">
                        <Rectangle Width="15"
                                   Height="15"
                                   Fill="Black">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_add}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Button>

                    <!--  If the user has a category selected, enables the user to delete the category.  -->
                    <Button x:Name="m_btnDeleteCategory"
                            Width="46"
                            Height="46"
                            Margin="734,409,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Cursor="Hand"
                            x:FieldModifier="private">
                        <Button.Style>
                            <Style BasedOn="{StaticResource MetroCircleButtonStyle}" TargetType="Button">
                                <Setter Property="IsEnabled" Value="True" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=userFilteringCategories, Path=SelectedItem}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                        <Rectangle Width="10"
                                   Height="3"
                                   Fill="Black">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_minus}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Button>
                </Grid>
            </TabItem>

            <!--  Input for user to calculate energy and financial costs of blocked request data.  -->
            <TabItem x:Name="m_wasteCalculationFiguresTab" Header="Waste Calculation Data">
                <Grid>
                    <TextBlock x:Name="textBlock2"
                               Width="415"
                               Height="61"
                               Margin="359,29,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Top"
                               Text="In this area, you can configure the data that is used to calculate an approximation of financial and energy cost of data that you've blocked using Stahp It."
                               TextWrapping="Wrap" />

                    <TextBox Width="284"
                             Height="23"
                             Margin="21,61,0,0"
                             HorizontalAlignment="Left"
                             VerticalAlignment="Top"
                             DataObject.Pasting="OnDollarValueTextPasting"
                             PreviewTextInput="OnDollarValueInputPreview"
                             Text="{Binding Path=UserFinancialCostPerGbString,
                                            Mode=TwoWay,
                                            UpdateSourceTrigger=PropertyChanged}"
                             TextWrapping="NoWrap" />

                    <TextBox Width="284"
                             Height="23"
                             Margin="21,144,0,0"
                             HorizontalAlignment="Left"
                             VerticalAlignment="Top"
                             DataObject.Pasting="OnDigitOnlyTextPasting"
                             PreviewTextInput="OnDigitOnlyTextPreview"
                             Text="{Binding Path=UserKwhCostPerGbString,
                                            Mode=TwoWay,
                                            UpdateSourceTrigger=PropertyChanged}"
                             TextWrapping="NoWrap" />

                    <Label Width="284"
                           Margin="21,21,0,0"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Top"
                           HorizontalContentAlignment="Left"
                           Content="Your Cost Per GB"
                           FontSize="25"
                           FontWeight="ExtraLight"
                           Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                           IsHitTestVisible="False"
                           Opacity=".7"
                           Padding="0,0,0,0"
                           TextOptions.TextRenderingMode="ClearType" />

                    <Label Width="284"
                           Margin="21,106,0,0"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Top"
                           HorizontalContentAlignment="Left"
                           Content="Estimated kWh Per GB"
                           FontSize="25"
                           FontWeight="ExtraLight"
                           Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                           IsHitTestVisible="False"
                           Opacity=".7"
                           Padding="0,0,0,0"
                           TextOptions.TextRenderingMode="ClearType" />

                </Grid>
            </TabItem>

        </Controls:MetroAnimatedSingleRowTabControl>

    </Grid>
</local:BaseView>
